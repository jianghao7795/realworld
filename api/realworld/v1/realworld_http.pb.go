// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: realworld/v1/realworld.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRealworldAddComment = "/realworld.v1.Realworld/AddComment"
const OperationRealworldCreateArticle = "/realworld.v1.Realworld/CreateArticle"
const OperationRealworldDeleteArticle = "/realworld.v1.Realworld/DeleteArticle"
const OperationRealworldDeleteComment = "/realworld.v1.Realworld/DeleteComment"
const OperationRealworldFollowUser = "/realworld.v1.Realworld/FollowUser"
const OperationRealworldGetArticle = "/realworld.v1.Realworld/GetArticle"
const OperationRealworldGetArticles = "/realworld.v1.Realworld/GetArticles"
const OperationRealworldGetComments = "/realworld.v1.Realworld/GetComments"
const OperationRealworldGetCurrentUser = "/realworld.v1.Realworld/GetCurrentUser"
const OperationRealworldGetProfile = "/realworld.v1.Realworld/GetProfile"
const OperationRealworldGetTags = "/realworld.v1.Realworld/GetTags"
const OperationRealworldGetTagsList = "/realworld.v1.Realworld/GetTagsList"
const OperationRealworldLogin = "/realworld.v1.Realworld/Login"
const OperationRealworldRegister = "/realworld.v1.Realworld/Register"
const OperationRealworldUnfollowUser = "/realworld.v1.Realworld/UnfollowUser"
const OperationRealworldUpdateArticle = "/realworld.v1.Realworld/UpdateArticle"
const OperationRealworldUpdateUser = "/realworld.v1.Realworld/UpdateUser"

type RealworldHTTPServer interface {
	AddComment(context.Context, *Comment) (*CommentReply, error)
	CreateArticle(context.Context, *Article) (*ArticleReply, error)
	DeleteArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	DeleteComment(context.Context, *CommentRequest) (*CommentReply, error)
	FollowUser(context.Context, *ProfileRequest) (*ProfileReply, error)
	GetArticle(context.Context, *ArticleRequest) (*ArticleReply, error)
	GetArticles(context.Context, *ArticleRequest) (*ArticleListReply, error)
	GetComments(context.Context, *CommentListRequest) (*CommentListReply, error)
	GetCurrentUser(context.Context, *User) (*UserReply, error)
	GetProfile(context.Context, *ProfileRequest) (*ProfileReply, error)
	GetTags(context.Context, *TagRequest) (*TagReply, error)
	GetTagsList(context.Context, *TagRequest) (*TagListReply, error)
	// Login Sends a greeting
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	UnfollowUser(context.Context, *ProfileRequest) (*ProfileReply, error)
	UpdateArticle(context.Context, *Article) (*ArticleReply, error)
	UpdateUser(context.Context, *UserRegister) (*UserReply, error)
}

func RegisterRealworldHTTPServer(s *http.Server, srv RealworldHTTPServer) {
	r := s.Route("/")
	r.POST("/api/users/login", _Realworld_Login0_HTTP_Handler(srv))
	r.POST("/api/users", _Realworld_Register0_HTTP_Handler(srv))
	r.GET("/api/user", _Realworld_GetCurrentUser0_HTTP_Handler(srv))
	r.PUT("/api/user/{username}", _Realworld_UpdateUser0_HTTP_Handler(srv))
	r.GET("/api/profiles/{username}", _Realworld_GetProfile0_HTTP_Handler(srv))
	r.POST("/api/profiles/follow", _Realworld_FollowUser0_HTTP_Handler(srv))
	r.DELETE("/api/profiles/{username}/follow", _Realworld_UnfollowUser0_HTTP_Handler(srv))
	r.GET("/api/tags/{id}", _Realworld_GetTags0_HTTP_Handler(srv))
	r.GET("/api/tags", _Realworld_GetTagsList0_HTTP_Handler(srv))
	r.POST("/api/articles", _Realworld_CreateArticle0_HTTP_Handler(srv))
	r.GET("/api/articles/{slug}", _Realworld_GetArticle0_HTTP_Handler(srv))
	r.GET("/api/articles", _Realworld_GetArticles0_HTTP_Handler(srv))
	r.PUT("/api/articles/{slug}", _Realworld_UpdateArticle0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}", _Realworld_DeleteArticle0_HTTP_Handler(srv))
	r.POST("/api/{article_id}/comments", _Realworld_AddComment0_HTTP_Handler(srv))
	r.GET("/api/{article_id}/comments", _Realworld_GetComments0_HTTP_Handler(srv))
	r.DELETE("/api/comments/{id}", _Realworld_DeleteComment0_HTTP_Handler(srv))
}

func _Realworld_Login0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_Register0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_GetCurrentUser0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in User
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldGetCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentUser(ctx, req.(*User))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_UpdateUser0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegister
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UserRegister))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_GetProfile0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldGetProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_FollowUser0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldFollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_UnfollowUser0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldUnfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowUser(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_GetTags0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldGetTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTags(ctx, req.(*TagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TagReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_GetTagsList0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldGetTagsList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTagsList(ctx, req.(*TagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TagListReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_CreateArticle0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Article
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldCreateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticle(ctx, req.(*Article))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_GetArticle0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldGetArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticle(ctx, req.(*ArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_GetArticles0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldGetArticles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticles(ctx, req.(*ArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_UpdateArticle0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Article
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldUpdateArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateArticle(ctx, req.(*Article))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_DeleteArticle0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldDeleteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArticle(ctx, req.(*ArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_AddComment0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Comment
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldAddComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddComment(ctx, req.(*Comment))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_GetComments0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldGetComments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComments(ctx, req.(*CommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentListReply)
		return ctx.Result(200, reply)
	}
}

func _Realworld_DeleteComment0_HTTP_Handler(srv RealworldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealworldDeleteComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteComment(ctx, req.(*CommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentReply)
		return ctx.Result(200, reply)
	}
}

type RealworldHTTPClient interface {
	AddComment(ctx context.Context, req *Comment, opts ...http.CallOption) (rsp *CommentReply, err error)
	CreateArticle(ctx context.Context, req *Article, opts ...http.CallOption) (rsp *ArticleReply, err error)
	DeleteArticle(ctx context.Context, req *ArticleRequest, opts ...http.CallOption) (rsp *ArticleReply, err error)
	DeleteComment(ctx context.Context, req *CommentRequest, opts ...http.CallOption) (rsp *CommentReply, err error)
	FollowUser(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	GetArticle(ctx context.Context, req *ArticleRequest, opts ...http.CallOption) (rsp *ArticleReply, err error)
	GetArticles(ctx context.Context, req *ArticleRequest, opts ...http.CallOption) (rsp *ArticleListReply, err error)
	GetComments(ctx context.Context, req *CommentListRequest, opts ...http.CallOption) (rsp *CommentListReply, err error)
	GetCurrentUser(ctx context.Context, req *User, opts ...http.CallOption) (rsp *UserReply, err error)
	GetProfile(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	GetTags(ctx context.Context, req *TagRequest, opts ...http.CallOption) (rsp *TagReply, err error)
	GetTagsList(ctx context.Context, req *TagRequest, opts ...http.CallOption) (rsp *TagListReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	UnfollowUser(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	UpdateArticle(ctx context.Context, req *Article, opts ...http.CallOption) (rsp *ArticleReply, err error)
	UpdateUser(ctx context.Context, req *UserRegister, opts ...http.CallOption) (rsp *UserReply, err error)
}

type RealworldHTTPClientImpl struct {
	cc *http.Client
}

func NewRealworldHTTPClient(client *http.Client) RealworldHTTPClient {
	return &RealworldHTTPClientImpl{client}
}

func (c *RealworldHTTPClientImpl) AddComment(ctx context.Context, in *Comment, opts ...http.CallOption) (*CommentReply, error) {
	var out CommentReply
	pattern := "/api/{article_id}/comments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealworldAddComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) CreateArticle(ctx context.Context, in *Article, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealworldCreateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) DeleteArticle(ctx context.Context, in *ArticleRequest, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldDeleteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) DeleteComment(ctx context.Context, in *CommentRequest, opts ...http.CallOption) (*CommentReply, error) {
	var out CommentReply
	pattern := "/api/comments/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldDeleteComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) FollowUser(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealworldFollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) GetArticle(ctx context.Context, in *ArticleRequest, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldGetArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) GetArticles(ctx context.Context, in *ArticleRequest, opts ...http.CallOption) (*ArticleListReply, error) {
	var out ArticleListReply
	pattern := "/api/articles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldGetArticles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) GetComments(ctx context.Context, in *CommentListRequest, opts ...http.CallOption) (*CommentListReply, error) {
	var out CommentListReply
	pattern := "/api/{article_id}/comments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldGetComments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) GetCurrentUser(ctx context.Context, in *User, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldGetCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) GetProfile(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldGetProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) GetTags(ctx context.Context, in *TagRequest, opts ...http.CallOption) (*TagReply, error) {
	var out TagReply
	pattern := "/api/tags/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldGetTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) GetTagsList(ctx context.Context, in *TagRequest, opts ...http.CallOption) (*TagListReply, error) {
	var out TagListReply
	pattern := "/api/tags"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldGetTagsList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/api/users/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealworldLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/api/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealworldRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) UnfollowUser(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}/follow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealworldUnfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) UpdateArticle(ctx context.Context, in *Article, opts ...http.CallOption) (*ArticleReply, error) {
	var out ArticleReply
	pattern := "/api/articles/{slug}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealworldUpdateArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RealworldHTTPClientImpl) UpdateUser(ctx context.Context, in *UserRegister, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/api/user/{username}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRealworldUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
